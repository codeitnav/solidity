{"id":"a073acf3d773d108d945b979c33495a9","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/03simpleStorage_mappings.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ncontract SimpleStorage{\r\n    uint256 myFavoriteNumber;\r\n\r\n    function retrieve() public view returns (uint256) {\r\n        return myFavoriteNumber;\r\n    }\r\n\r\n    struct Person{\r\n        string name;\r\n        uint256 FavoriteNumber;\r\n    }\r\n\r\n    Person[] public listOfPeople;\r\n\r\n    mapping(string => uint256) public nameToFavouriteNumber;\r\n    // default value for a key is 0\r\n\r\n    function addPerson(string memory _name, uint256 _favouriteNum) public {\r\n        listOfPeople.push(Person(_name, _favouriteNum));\r\n        nameToFavouriteNumber[_name] = _favouriteNum;\r\n    }\r\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/03simpleStorage_mappings.sol":{"id":0,"ast":{"absolutePath":"contracts/03simpleStorage_mappings.sol","exportedSymbols":{"SimpleStorage":[48]},"id":49,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".10"],"nodeType":"PragmaDirective","src":"33:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":48,"linearizedBaseContracts":[48],"name":"SimpleStorage","nameLocation":"70:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"myFavoriteNumber","nameLocation":"98:16:0","nodeType":"VariableDeclaration","scope":48,"src":"90:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint256","nodeType":"ElementaryTypeName","src":"90:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"body":{"id":10,"nodeType":"Block","src":"173:42:0","statements":[{"expression":{"id":8,"name":"myFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"191:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7,"id":9,"nodeType":"Return","src":"184:23:0"}]},"functionSelector":"2e64cec1","id":11,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"132:8:0","nodeType":"FunctionDefinition","parameters":{"id":4,"nodeType":"ParameterList","parameters":[],"src":"140:2:0"},"returnParameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11,"src":"164:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:9:0"},"scope":48,"src":"123:92:0","stateMutability":"view","virtual":false,"visibility":"public"},{"canonicalName":"SimpleStorage.Person","id":16,"members":[{"constant":false,"id":13,"mutability":"mutable","name":"name","nameLocation":"254:4:0","nodeType":"VariableDeclaration","scope":16,"src":"247:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":12,"name":"string","nodeType":"ElementaryTypeName","src":"247:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":15,"mutability":"mutable","name":"FavoriteNumber","nameLocation":"277:14:0","nodeType":"VariableDeclaration","scope":16,"src":"269:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"269:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Person","nameLocation":"230:6:0","nodeType":"StructDefinition","scope":48,"src":"223:76:0","visibility":"public"},{"constant":false,"functionSelector":"2ebce631","id":20,"mutability":"mutable","name":"listOfPeople","nameLocation":"323:12:0","nodeType":"VariableDeclaration","scope":48,"src":"307:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$16_storage_$dyn_storage","typeString":"struct SimpleStorage.Person[]"},"typeName":{"baseType":{"id":18,"nodeType":"UserDefinedTypeName","pathNode":{"id":17,"name":"Person","nameLocations":["307:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":16,"src":"307:6:0"},"referencedDeclaration":16,"src":"307:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$16_storage_ptr","typeString":"struct SimpleStorage.Person"}},"id":19,"nodeType":"ArrayTypeName","src":"307:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$16_storage_$dyn_storage_ptr","typeString":"struct SimpleStorage.Person[]"}},"visibility":"public"},{"constant":false,"functionSelector":"b2ac62ef","id":24,"mutability":"mutable","name":"nameToFavouriteNumber","nameLocation":"378:21:0","nodeType":"VariableDeclaration","scope":48,"src":"344:55:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":23,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":21,"name":"string","nodeType":"ElementaryTypeName","src":"352:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"344:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":22,"name":"uint256","nodeType":"ElementaryTypeName","src":"362:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":46,"nodeType":"Block","src":"515:121:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":35,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"551:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":36,"name":"_favouriteNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"558:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":34,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"544:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$16_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"544:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$16_memory_ptr","typeString":"struct SimpleStorage.Person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Person_$16_memory_ptr","typeString":"struct SimpleStorage.Person memory"}],"expression":{"id":31,"name":"listOfPeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"526:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$16_storage_$dyn_storage","typeString":"struct SimpleStorage.Person storage ref[] storage ref"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"539:4:0","memberName":"push","nodeType":"MemberAccess","src":"526:17:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Person_$16_storage_$dyn_storage_ptr_$_t_struct$_Person_$16_storage_$returns$__$attached_to$_t_array$_t_struct$_Person_$16_storage_$dyn_storage_ptr_$","typeString":"function (struct SimpleStorage.Person storage ref[] storage pointer,struct SimpleStorage.Person storage ref)"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"526:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":39,"nodeType":"ExpressionStatement","src":"526:47:0"},{"expression":{"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":40,"name":"nameToFavouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"584:21:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":42,"indexExpression":{"id":41,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"606:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"584:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":43,"name":"_favouriteNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"615:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"584:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":45,"nodeType":"ExpressionStatement","src":"584:44:0"}]},"functionSelector":"6f760f41","id":47,"implemented":true,"kind":"function","modifiers":[],"name":"addPerson","nameLocation":"454:9:0","nodeType":"FunctionDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"_name","nameLocation":"478:5:0","nodeType":"VariableDeclaration","scope":47,"src":"464:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":25,"name":"string","nodeType":"ElementaryTypeName","src":"464:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":28,"mutability":"mutable","name":"_favouriteNum","nameLocation":"493:13:0","nodeType":"VariableDeclaration","scope":47,"src":"485:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":27,"name":"uint256","nodeType":"ElementaryTypeName","src":"485:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"463:44:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"515:0:0"},"scope":48,"src":"445:191:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":49,"src":"61:578:0","usedErrors":[],"usedEvents":[]}],"src":"33:606:0"}}},"contracts":{"contracts/03simpleStorage_mappings.sol":{"SimpleStorage":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favouriteNum","type":"uint256"}],"name":"addPerson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listOfPeople","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"FavoriteNumber","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToFavouriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favouriteNum\",\"type\":\"uint256\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listOfPeople\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"FavoriteNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToFavouriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/03simpleStorage_mappings.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/03simpleStorage_mappings.sol\":{\"keccak256\":\"0x42428a46370092ca485f45bcd8652327ace4f1710f7b96061a73fb255ce1277b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02b1e684bfa1e8fa10356d142d66231874890532c567fc74e48e0ed0678d3d25\",\"dweb:/ipfs/QmbxwMwc2bpVKX7ZvjYqottBXxpwRBG4s93KSaPk4Pv9VU\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"03simpleStorage_mappings.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[10]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r2, r3\n\tjump.lt\t@.BB0_2\n\tld\tr1, r3\n\tshr.s\t224, r3, r3\n\tsub.s!\t@CPI0_2[0], r3, r5\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r3, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r5\n\tadd\t@CPI0_12[0], r5, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.eq\t@.BB0_18\n.BB0_16:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r3, r5\n\tjump.eq\t@.BB0_27\n\tsub.s!\t@CPI0_4[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_7[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[9]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r3\n\tadd\tstack-[10], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_27:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t68, r2, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_7[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_9[0], r3, r7\n\tjump.ge\t@.BB0_32\n\tadd\t31, r3, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_10[0], r7, r8\n\tjump.le\t@.BB0_34\n.BB0_32:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_18:\n\tadd\tr5, r0, stack-[10]\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_20\n\tadd\tr6, r0, stack-[9]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_24\n\tadd\t160, r0, r1\n\tjump\t@.BB0_19\n.BB0_34:\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r3\n\tadd\tr5, r3, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r2, r2\n\tjump.le\t@.BB0_35\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_20:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_19:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r1\n\tadd\t@CPI0_14[0], r1, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[10]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\t64, r0, r1\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[8]\n\tadd\t64, r2, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[7]\n\tst.1\tr1, r3\n\tadd\t96, r2, r2\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r1\n\tadd\tstack-[8], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[7], r0, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t96, r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[9], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_35:\n\tadd\t32, r6, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_64\n\tadd\tr0, r0, r7\n.BB0_37:\n\tshl.s\t5, r7, r8\n\tptr.add\tr2, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_37\n.BB0_64:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_39\n\tshl.s\t5, r6, r6\n\tptr.add\tr2, r6, r2\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr2, r2\n\tsub\t256, r5, r5\n\tshr\tr2, r5, r2\n\tshl\tr2, r5, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB0_39:\n\tadd\t160, r3, r2\n\tst.1\tr2, r0\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r5\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_11[0], r1, r2\n\tjump.gt\t@.BB0_32\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tst.1.inc\tr1, r4, r4\n\tst.1\tr4, r5\n\tadd\t1, r0, r7\n\tsload\tr7, r2\n\tsub.s!\t@CPI0_7[0], r2, r3\n\tjump.gt\t@.BB0_32\n\tadd\t1, r2, r3\n\tsstore\tr7, r3\n\tst.1\t0, r7\n\tshl.s\t1, r2, r3\n\tadd\t@CPI0_12[0], r3, r6\n\tld.1\tr1, r9\n\tld.1.inc\tr9, r8, r11\n\tsub.s!\t@CPI0_7[0], r8, r1\n\tjump.gt\t@.BB0_32\n\tsload\tr6, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r12\n\tadd.ne\tr2, r0, r12\n\tsub.s!\t31, r12, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_16\n\tadd\tr11, r0, stack-[1]\n\tadd\tr9, r0, stack-[2]\n\tadd\tr7, r0, stack-[8]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr3, r0, stack-[5]\n\tadd\tr4, r0, stack-[6]\n\tadd\tr5, r0, stack-[7]\n\tadd\tr12, r0, stack-[3]\n\tsub.s!\t32, r12, r1\n\tadd\tr6, r0, stack-[9]\n\tadd\tr8, r0, stack-[10]\n\tjump.lt\t@.BB0_46\n\tst.1\t0, r6\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[10], r0, r8\n\tadd\t31, r8, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r8, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_46\n.BB0_47:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_47\n.BB0_46:\n\tsub.s!\t31, r8, r1\n\tjump.le\t@.BB0_57\n\tadd\tstack-[9], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[10], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_52\n\tadd\t32, r0, r2\n\tjump\t@.BB0_54\n.BB0_24:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_25:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_25\n\tadd\t192, r2, r1\n\tjump\t@.BB0_19\n.BB0_57:\n\tsub!\tstack-[10], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_59\n\tadd\tstack-[1], r0, r1\n\tld.1\tr1, r1\n.BB0_59:\n\tadd\tstack-[10], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, stack-[8]\n\tjump\t@.BB0_48\n.BB0_52:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[2], r0, r6\n.BB0_53:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_53\n.BB0_54:\n\tsub.s!\tstack-[10], r3, r3\n\tjump.ge\t@.BB0_56\n\tadd\tstack-[10], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[2], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_56:\n\tadd\tstack-[10], r0, r1\n\tshl.s\t1, r1, r1\n.BB0_48:\n\tor\tstack-[8], r1, r1\n\tadd\tstack-[9], r0, r2\n\tsstore\tr2, r1\n\tadd\tstack-[5], r0, r1\n\tadd\t@CPI0_14[0], r1, r1\n\tadd\tstack-[6], r0, r2\n\tld.1\tr2, r2\n\tsstore\tr1, r2\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[9]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r3\n\tadd\tstack-[10], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin2:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end2:\n\nabi_decode_string:\n.func_begin3:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI3_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI3_0[0], r2, r6\n\tand\t@CPI3_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI3_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB3_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI3_1[0], r4, r1\n\tjump.ge\t@.BB3_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI3_2[0], r5, r8\n\tjump.gt\t@.BB3_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB3_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB3_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB3_12\n\tadd\tr0, r0, r7\n.BB3_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB3_9\n.BB3_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB3_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB3_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB3_3:\n\tadd\t@CPI3_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1870008128\nCPI0_3:\n\t.cell 1870008129\nCPI0_4:\n\t.cell 2997641967\nCPI0_5:\n\t.cell 778358465\nCPI0_6:\n\t.cell 784131633\nCPI0_7:\nCPI1_0:\nCPI3_2:\n\t.cell 18446744073709551615\nCPI0_8:\n\t.cell 2535301200456458802993406410752\nCPI0_9:\nCPI3_1:\n\t.cell 18446744073709551616\nCPI0_10:\n\t.cell 18446744073709551487\nCPI0_11:\n\t.cell 18446744073709551551\nCPI0_12:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_13:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_14:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_15:\nCPI1_1:\nCPI3_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_16:\nCPI1_2:\nCPI3_4:\n\t.cell 2852213850513516153367582212096\nCPI0_17:\n\t.cell 2535301202817642044428229017600\nCPI3_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"addPerson(string,uint256)":"6f760f41","listOfPeople(uint256)":"2ebce631","nameToFavouriteNumber(string)":"b2ac62ef","retrieve()":"2e64cec1"}},"irOptimized":"/// @use-src 0:\"contracts/03simpleStorage_mappings.sol\"\nobject \"SimpleStorage_48\" {\n    code {\n        {\n            /// @src 0:61:639  \"contract SimpleStorage{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage_48_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage_48_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/03simpleStorage_mappings.sol\"\n    object \"SimpleStorage_48_deployed\" {\n        code {\n            {\n                /// @src 0:61:639  \"contract SimpleStorage{...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_1, sload(_4))\n                        return(_1, 32)\n                    }\n                    case 0x2ebce631 {\n                        if callvalue() { revert(_4, _4) }\n                        let _5 := 32\n                        if slt(add(calldatasize(), not(3)), _5) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        let _6 := 1\n                        /// @src 0:307:335  \"Person[] public listOfPeople\"\n                        if iszero(lt(value, /** @src 0:61:639  \"contract SimpleStorage{...\" */ sload(1)))\n                        /// @src 0:307:335  \"Person[] public listOfPeople\"\n                        {\n                            revert(/** @src 0:61:639  \"contract SimpleStorage{...\" */ _4, _4)\n                        }\n                        /// @src 0:307:335  \"Person[] public listOfPeople\"\n                        let slot, offset := storage_array_index_access_struct_Person__dyn(value)\n                        /// @src 0:61:639  \"contract SimpleStorage{...\"\n                        let memPtr := mload(_2)\n                        let ret := _4\n                        let slotValue := sload(slot)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let updated_pos := add(memPtr, _5)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(updated_pos, and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _5)\n                        }\n                        case 1 {\n                            mstore(_4, slot)\n                            let dataPos := keccak256(_4, _5)\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _5) }\n                            {\n                                mstore(add(add(memPtr, i), _5), sload(dataPos))\n                                dataPos := add(dataPos, _6)\n                            }\n                            ret := add(add(memPtr, i), _5)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let _7 := sload(/** @src 0:307:335  \"Person[] public listOfPeople\" */ add(slot, /** @src 0:61:639  \"contract SimpleStorage{...\" */ 1))\n                        let memPos := mload(_2)\n                        mstore(memPos, _2)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _2), length_1)\n                        copy_memory_to_memory_with_cleanup(updated_pos, add(memPos, 96), length_1)\n                        mstore(add(memPos, _5), _7)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                    }\n                    case 0x6f760f41 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let offset_1 := calldataload(_3)\n                        let _8 := 0xffffffffffffffff\n                        if gt(offset_1, _8) { revert(_4, _4) }\n                        let value0 := abi_decode_string(add(_3, offset_1), calldatasize())\n                        let value_1 := calldataload(36)\n                        let memPtr_1 := mload(_2)\n                        let newFreePtr := add(memPtr_1, _2)\n                        if or(gt(newFreePtr, _8), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        mstore(_2, newFreePtr)\n                        mstore(memPtr_1, value0)\n                        let _9 := 32\n                        /// @src 0:544:572  \"Person(_name, _favouriteNum)\"\n                        let _10 := add(memPtr_1, /** @src 0:61:639  \"contract SimpleStorage{...\" */ _9)\n                        mstore(_10, value_1)\n                        let _11 := 1\n                        let oldLen := sload(_11)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        sstore(_11, add(oldLen, _11))\n                        let slot_1, offset_2 := storage_array_index_access_struct_Person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, 36)\n                        }\n                        let _12 := mload(memPtr_1)\n                        let newLen := mload(_12)\n                        if gt(newLen, _8)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        let _13 := extract_byte_array_length(sload(slot_1))\n                        if gt(_13, 31)\n                        {\n                            mstore(_4, slot_1)\n                            let data := keccak256(_4, _9)\n                            let deleteStart := add(data, shr(5, add(newLen, 31)))\n                            if lt(newLen, _9) { deleteStart := data }\n                            let _14 := add(data, shr(5, add(_13, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _14) { start := add(start, _11) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _9\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_4, slot_1)\n                            let dstPtr := keccak256(_4, _9)\n                            let i_1 := _4\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, _9) }\n                            {\n                                sstore(dstPtr, mload(add(_12, srcOffset)))\n                                dstPtr := add(dstPtr, _11)\n                                srcOffset := add(srcOffset, _9)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_12, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(slot_1, add(shl(_11, newLen), _11))\n                        }\n                        default {\n                            let value_2 := _4\n                            if newLen\n                            {\n                                value_2 := mload(add(_12, srcOffset))\n                            }\n                            sstore(slot_1, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_11, newLen)))\n                        }\n                        sstore(add(slot_1, _11), mload(_10))\n                        let pos := mload(_2)\n                        let length_2 := mload(value0)\n                        copy_memory_to_memory_with_cleanup(add(value0, _9), pos, length_2)\n                        let end := add(pos, length_2)\n                        mstore(end, /** @src 0:584:605  \"nameToFavouriteNumber\" */ 0x02)\n                        /// @src 0:61:639  \"contract SimpleStorage{...\"\n                        sstore(keccak256(pos, add(sub(end, pos), _9)), value_1)\n                        return(_4, _4)\n                    }\n                    case 0xb2ac62ef {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let offset_3 := calldataload(_3)\n                        if gt(offset_3, 0xffffffffffffffff) { revert(_4, _4) }\n                        let value0_1 := abi_decode_string(add(_3, offset_3), calldatasize())\n                        let pos_1 := mload(_2)\n                        let length_3 := mload(value0_1)\n                        copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_3)\n                        let end_1 := add(pos_1, length_3)\n                        mstore(end_1, /** @src 0:344:399  \"mapping(string => uint256) public nameToFavouriteNumber\" */ 2)\n                        /// @src 0:61:639  \"contract SimpleStorage{...\"\n                        let _15 := sload(keccak256(pos_1, add(sub(end_1, pos_1), 32)))\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _15)\n                        return(memPos_1, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:307:335  \"Person[] public listOfPeople\" */ 1)))\n                /// @src 0:61:639  \"contract SimpleStorage{...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:307:335  \"Person[] public listOfPeople\" */ 1)\n                /// @src 0:61:639  \"contract SimpleStorage{...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:307:335  \"Person[] public listOfPeople\" */ 1, /** @src 0:61:639  \"contract SimpleStorage{...\" */ index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:61:639  \"contract SimpleStorage{...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:61:639  \"contract SimpleStorage{...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:61:639  \"contract SimpleStorage{...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:61:639  \"contract SimpleStorage{...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 0:61:639  \"contract SimpleStorage{...\"\n                array := memPtr\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ada0dd47b6ecb319e95efd25a8b883e1faf9decafbcea451dfe05d390729b2d164736f6c63430008180033\"\n    }\n}\n","hash":"0100009f886105146237e4a23d610b573b16d5f9f14aea9005454ef43de9b98d","factoryDependencies":{}}}}}}